@page "/"
@page "/transactions"
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using InterviewMauiBlazor.Database.Entities
@using InterviewMauiBlazor.Services

<h3>Transaction Management</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-primary" @onclick="CreateTransaction">Add Transaction</button>
    <input type="text"
           placeholder="Search..."
           class="form-control"
           style="max-width:400px;"
           @oninput="OnSearchInput" />
    <button class="btn btn-primary" @onclick="GoToReport">View Report</button>
</div>

<div class="table-responsive">
    <table class="table table-striped w-100">
        <thead>
            <tr class="text-nowrap">
                <th>Product</th>
                <th>Quantity</th>
                <th>Total Price</th>
                <th>Buyer</th>
                <th>Seller</th>
                <th>Time</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (transactions == null)
            {
                <tr>
                    <td colspan="8">Loading data...</td>
                </tr>
            }
            else if (!transactions.Any())
            {
                <tr>
                    <td colspan="8">No transactions.</td>
                </tr>
            }
            else
            {
                @foreach (var t in transactions)
                {
                    <tr class="text-nowrap">
                        <td>@t.Product?.Name</td>
                        <td>@t.Quantity</td>
                        <td>@t.TotalPrice</td>
                        <td>@t.Buyer</td>
                        <td>@t.Seller</td>
                        <td>@t.Time.ToString("dd-MM-yyyy")</td>
                        <td>@t.Status</td>
                        <td>
                            @{
                                var encodedTime = System.Net.WebUtility.UrlEncode(t.Time.ToString("dd-MM-yyyy"));
                            }
                            <button class="btn btn-sm btn-warning" @onclick="() => EditTransaction(t.OrderId, t.ProductId, t.Time)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmAndDelete(t.OrderId, t.ProductId, t.Time)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Transaction> transactions;
    private string searchText = string.Empty;
    private CancellationTokenSource searchCts;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetTransactionsAsync();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;

        searchCts?.Cancel();
        searchCts?.Dispose();
        searchCts = new CancellationTokenSource();

        try
        {
            await Task.Delay(300, searchCts.Token);
            await RefreshTransactions();
        }
        catch (TaskCanceledException)
        {
        }
    }

    private async Task RefreshTransactions()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
            transactions = await TransactionService.SearchTransactionsAsync(searchText);
        else
            transactions = await TransactionService.GetTransactionsAsync();

        StateHasChanged();
    }

    void CreateTransaction() => NavigationManager.NavigateTo("/transactionform");

    void EditTransaction(int orderId, int productId, DateTime time)
    {
        var encodedTime = System.Net.WebUtility.UrlEncode(time.ToString("dd-MM-yyyy"));
        NavigationManager.NavigateTo($"/transactionform/{orderId}/{productId}?time={encodedTime}");
    }

    async Task ConfirmAndDelete(int orderId, int productId, DateTime time)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?");
        if (confirmed)
        {
            await TransactionService.DeleteTransactionAsync(orderId, productId, time);
            await RefreshTransactions();
        }
    }

    void GoToReport() => NavigationManager.NavigateTo("/report");
}
